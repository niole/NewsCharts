var applicationRender = (
  <FluxApplication flux={flux}>
    <FluxController mapping={flux => { return {
      post: flux.store('posts').getPostById(this.props.postId) // how get postId
    }}}>
      <BlogPost style="single-post" />
    </FluxController>
  </FluxApplication>
);

class BlogPost extends React.Component {
  render() {
    return (
      <div>
        <h1>{this.props.title}</h1>
        <small>Posted on {this.formatDate(this.props.postedAt)}</small>
        <div>{this.props.body}</div>
      </div>
    );
  }
}

BlogPost.propTypes = {
  post: React.PropTypes.shape({
    title: React.PropTypes.string.isRequired,
    body: React.PropTypes.string.isRequired,
    postedAt: React.PropTypes.somethingDate.isRequired
  }),
  style: React.PropTypes.oneOf(['single-post', 'multi-post'])
};





class BlogPost extends React.Component {
  render() {
    return (
      <div>
        <h1>{this.props.title}</h1>
        <small>Posted on {this.formatDate(this.props.postedAt)}</small>
        <div>{this.props.body}</div>
      </div>
    );
  }
}


class BlogPostController extends ReactFluxxor.FluxController {
  watching() {
    return [flux.store("posts"), "comments"]
  }

  mapping(flux) {
    return {
      post: flux.store('posts').getPostById(this.props.postId)
    };
  }

  render() {
    //
  }
}

routes = (
  <Route name="post" path="/:postId" handler={BlogPostController} />
);






class BlogPost extends React.Component {
  render() {
    return (
      <div>
        <h1>{this.props.title}</h1>
        <small>Posted on {this.formatDate(this.props.postedAt)}</small>
        <div>{this.props.body}</div>
      </div>
    );
  }
}

BlogPost.propTypes = {
  post: React.PropTypes.shape({
    title: React.PropTypes.string.isRequired,
    body: React.PropTypes.string.isRequired,
    postedAt: React.PropTypes.somethingDate.isRequired
  }),
  style: React.PropTypes.oneOf(['single-post', 'multi-post'])
};


class Comments extends React.Component {
  render() {
    return (
      <div>
        <h2>Comments</h2>
        {this.props.comments.map(this.renderComment)}
      </div>
    );
  }

  renderComment(comment) {
    return (
      <Comment key={comment.id} onReply={this.props.onCommentReply}
               author={comment.author} comment={comment.body} />
    );
  }
}
